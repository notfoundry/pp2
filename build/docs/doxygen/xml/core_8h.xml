<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="core_8h" kind="file" language="C++">
    <compoundname>core.h</compoundname>
    <includedby refid="primitive_8h" local="yes">/github/workspace/include/pp2/primitive.h</includedby>
    <invincdepgraph>
      <node id="2">
        <label>/github/workspace/include/pp2/primitive.h</label>
        <link refid="primitive_8h_source"/>
      </node>
      <node id="1">
        <label>/github/workspace/include/pp2/primitive/core.h</label>
        <link refid="core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="core_8h_1a2e85a4c48515c59b026ce31749692513" prot="public" static="no">
        <name>PP2_SCAN</name>
        <param><defname>...</defname></param>
        <initializer>__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitutes all of the provided macro arguments into the macro replacement list without changing them.</para>
<para>This is typically used to force an additional scan over the tokens in the macro arguments, allowing additional macro expansions to take place if any are legal to perform. This only differs from <ref refid="open_8h_1a4b438a51aa1b73bb331e7da86d375c13" kindref="member">PP2_OPEN</ref> in its intended use, as demonstrated: <programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>FOO(x)<sp/>PP2_SCAN(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BAR<sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FOO(BAR<sp/><ref refid="core_8h_1a996770b8535ea8b7d129a45d2787d540" kindref="member">PP2_BLOCK</ref><sp/>())<sp/></highlight><highlight class="comment">//<sp/>123</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>compared<sp/>to...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FOO(x)<sp/>PP2_OPEN<sp/>x</highlight></codeline>
<codeline><highlight class="preprocessor">FOO((1,2,3))<sp/></highlight><highlight class="comment">//<sp/>1,2,3</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>the token sequence to scan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/primitive/core.h" line="24" column="9" bodyfile="/github/workspace/include/pp2/primitive/core.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a996770b8535ea8b7d129a45d2787d540" prot="public" static="no">
        <name>PP2_BLOCK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitutes no tokens into the macro replacmeent list, effectively advancing the macro evaluator ahead by one token and performing a no-op. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/primitive/core.h" line="30" column="9" bodyfile="/github/workspace/include/pp2/primitive/core.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PP2_PRIMITIVE_CORE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PP2_PRIMITIVE_CORE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="core_8h_1a2e85a4c48515c59b026ce31749692513" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PP2_SCAN(...)<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="core_8h_1a996770b8535ea8b7d129a45d2787d540" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PP2_BLOCK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/include/pp2/primitive/core.h"/>
  </compounddef>
</doxygen>
