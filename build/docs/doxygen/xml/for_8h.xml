<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="for_8h" kind="file" language="C++">
    <compoundname>for.h</compoundname>
    <includes refid="compiler_8h" local="yes">pp2/language/compiler.h</includes>
    <includes refid="while_8h" local="yes">pp2/language/statements/while.h</includes>
    <includes refid="at_8h" local="yes">pp2/primitive/tuple/at.h</includes>
    <includedby refid="language_8h" local="yes">/github/workspace/include/pp2/language.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>pp2/language/basic/block.h</label>
        <link refid="block_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pp2/language/compiler.h</label>
        <link refid="compiler_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/github/workspace/include/pp2/language/statements/for.h</label>
        <link refid="for_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>pp2/language/statements/while.h</label>
        <link refid="while_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pp2/machine/exception/throw.h</label>
        <link refid="throw_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pp2/machine/goto/goto.h</label>
        <link refid="goto_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pp2/machine/goto/label.h</label>
        <link refid="label_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pp2/primitive/assoc/detail/find_tables.h</label>
        <link refid="find__tables_8h"/>
      </node>
      <node id="4">
        <label>pp2/primitive/assoc/find.h</label>
        <link refid="find_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pp2/primitive/basic/invoke.h</label>
        <link refid="invoke_8h"/>
      </node>
      <node id="10">
        <label>pp2/primitive/punctuation/comma.h</label>
        <link refid="comma_8h"/>
      </node>
      <node id="6">
        <label>pp2/primitive/tuple/at.h</label>
        <link refid="at_8h"/>
      </node>
      <node id="7">
        <label>pp2/primitive/tuple/eat.h</label>
        <link refid="eat_8h"/>
      </node>
      <node id="13">
        <label>pp2/primitive/tuple/open.h</label>
        <link refid="open_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/github/workspace/include/pp2/language.h</label>
        <link refid="language_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/github/workspace/include/pp2/language/statements/for.h</label>
        <link refid="for_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/github/workspace/include/pp2/pp2.h</label>
        <link refid="pp2_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="for_8h_1a9bc8701674786a69249ac25993b387d9" prot="public" static="no">
        <name>PP2_DEF_for</name>
        <param><defname>init_stx</defname></param>
        <param><defname>cond_stx</defname></param>
        <param><defname>update_stx</defname></param>
        <initializer>)PP2_COMPILE_LANGUAGE_FOR(init_stx,cond_stx,update_stx,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="10" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a5919ab08e00a1e7d23bc9d96e47dbc1a" prot="public" static="no">
        <name>PP2_COMPILE_LANGUAGE_FOR</name>
        <param><defname>init_stx</defname></param>
        <param><defname>cond_stx</defname></param>
        <param><defname>update_stx</defname></param>
        <param><defname>body_stx_tup</defname></param>
        <initializer>        IP2_COMPILE_LANGUAGE_FOR_INLINE_INIT_IF_PRESENT( \
            IP2_COMPILE_LANGUAGE_FOR_TEST_IF_INIT_OMITTED init_stx () \
        )(init_stx) /*no comma*/ \
        PP2_COMPILE_LANGUAGE_WHILE( \
            cond_stx, \
            IP2_COMPILE_LANGUAGE_FOR_MERGE_BODY_AND_UPDATE_IF_PRESENT( \
                IP2_COMPILE_LANGUAGE_FOR_TEST_IF_UPDATE_OMITTED update_stx () \
            )(,body_stx_tup,update_stx) \
        )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="12" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a0a2d9da0f79e77d3c4a1881f4f260caf" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_INLINE_INIT_IF_PRESENT</name>
        <param><defname>...</defname></param>
        <initializer>PP2_TUPLE_AT_1(,__VA_ARGS__,IP2_COMPILE_LANGUAGE_FOR_WITH_INIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="23" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a12ec4bc1233ec9a5f5824199d0bd770e" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_TEST_IF_INIT_OMITTED</name>
        <param><defname>...</defname></param>
        <initializer>,IP2_COMPILE_LANGUAGE_FOR_WITHOUT_INIT,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="24" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a061707fada7efd2027a6aa13744e289a" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_WITH_INIT</name>
        <param><defname>init_stx</defname></param>
        <initializer>8PP2_LANGUAGE_COMPILE,init_stx,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="25" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1add36fe2376c44b74242944d20dc03af3" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_WITHOUT_INIT</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="26" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a692cd6ce0b2110a1459d3dec2f948a9c" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_MERGE_BODY_AND_UPDATE_IF_PRESENT</name>
        <param><defname>...</defname></param>
        <initializer>PP2_TUPLE_AT_1(,__VA_ARGS__,IP2_COMPILE_LANGUAGE_FOR_WITH_UPDATE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="28" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1acaccc1537cb93fd55635d4731423a5a6" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_TEST_IF_UPDATE_OMITTED</name>
        <param><defname>...</defname></param>
        <initializer>,IP2_COMPILE_LANGUAGE_FOR_WITHOUT_UPDATE,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="29" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a8aab54373702d7feddec32bf0d0d3116" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_WITH_UPDATE</name>
        <param><defname>P</defname></param>
        <param><defname>body_stx_tup</defname></param>
        <param><defname>update_stx</defname></param>
        <initializer>(<ref refid="open_8h_1a4b438a51aa1b73bb331e7da86d375c13" kindref="member">PP2_OPEN</ref> P##body_stx_tup,P##update_stx)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="30" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="for_8h_1a09b0a4dff458cb03a24e8691132b8dda" prot="public" static="no">
        <name>IP2_COMPILE_LANGUAGE_FOR_WITHOUT_UPDATE</name>
        <param><defname>P</defname></param>
        <param><defname>body_stx_tup</defname></param>
        <param><defname>_</defname></param>
        <initializer>P##body_stx_tup</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/github/workspace/include/pp2/language/statements/for.h" line="31" column="9" bodyfile="/github/workspace/include/pp2/language/statements/for.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PP2_LANGUAGE_STATEMENTS_FOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PP2_LANGUAGE_STATEMENTS_FOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pp2/language/compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="while_8h" kindref="compound">pp2/language/statements/while.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="at_8h" kindref="compound">pp2/primitive/tuple/at.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PP2_DEF_for(init_stx,cond_stx,update_stx)<sp/>)PP2_COMPILE_LANGUAGE_FOR(init_stx,cond_stx,update_stx,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PP2_COMPILE_LANGUAGE_FOR(init_stx,cond_stx,update_stx,body_stx_tup)<sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP2_COMPILE_LANGUAGE_FOR_INLINE_INIT_IF_PRESENT(<sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP2_COMPILE_LANGUAGE_FOR_TEST_IF_INIT_OMITTED<sp/>init_stx<sp/>()<sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)(init_stx)<sp/></highlight><highlight class="comment">/*no<sp/>comma*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PP2_COMPILE_LANGUAGE_WHILE(<sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cond_stx,<sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP2_COMPILE_LANGUAGE_FOR_MERGE_BODY_AND_UPDATE_IF_PRESENT(<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IP2_COMPILE_LANGUAGE_FOR_TEST_IF_UPDATE_OMITTED<sp/>update_stx<sp/>()<sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)(,body_stx_tup,update_stx)<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_INLINE_INIT_IF_PRESENT(...)<sp/>PP2_TUPLE_AT_1(,__VA_ARGS__,IP2_COMPILE_LANGUAGE_FOR_WITH_INIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_TEST_IF_INIT_OMITTED(...)<sp/>,IP2_COMPILE_LANGUAGE_FOR_WITHOUT_INIT,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_WITH_INIT(init_stx)<sp/>8PP2_LANGUAGE_COMPILE,init_stx,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_WITHOUT_INIT()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_MERGE_BODY_AND_UPDATE_IF_PRESENT(...)<sp/>PP2_TUPLE_AT_1(,__VA_ARGS__,IP2_COMPILE_LANGUAGE_FOR_WITH_UPDATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_TEST_IF_UPDATE_OMITTED(...)<sp/>,IP2_COMPILE_LANGUAGE_FOR_WITHOUT_UPDATE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_WITH_UPDATE(P,body_stx_tup,update_stx)<sp/>(PP2_OPEN<sp/>P##body_stx_tup,P##update_stx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IP2_COMPILE_LANGUAGE_FOR_WITHOUT_UPDATE(P,body_stx_tup,_)<sp/>P##body_stx_tup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/github/workspace/include/pp2/language/statements/for.h"/>
  </compounddef>
</doxygen>
